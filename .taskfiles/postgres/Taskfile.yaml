---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  dropDatabases: "{{.ROOT_DIR}}/.taskfiles/Postgres/drop_databases.sql"
  

tasks:
  maintenance-main:
    desc: Set/unset maintenance mode on main cluster
    summary: |
      Args:
        command: 'set' or 'unset' (required)
    cmds:
      - kubectl cnpg --context main maintenance {{.command}} --reusePVC -n dbms postgres
      - kubectl cnpg --context main maintenance {{.command}} --reusePVC -n media immich
    requires:
      vars:
        - command

  maintenance-staging:
    desc: Set/unset maintenance mode on main cluster
    summary: |
      Args:
        command: 'set' or 'unset' (required)
    cmds:
      - kubectl cnpg --context staging maintenance {{.command}} --reusePVC -n dbms postgres
    requires:
      vars:
        - command

  restore_dmarc:
    desc: Restore dmarc database
    cmds:
      - task: _down
        vars:
          NAMESPACE: security
          HELMRELEASE: dmarc-report
          KUSTOMIZATION: security-dmarc-report
          TYPE: statefulset
          NAME: dmarc-report
      - echo "DROP DATABASE IF EXISTS dmarc;" | psql
      - task: _restore_db
        vars:
          DATABASE: dmarc
      - task: _up
        vars:
          NAMESPACE: security
          HELMRELEASE: dmarc-report
          KUSTOMIZATION: security-dmarc-report
          TYPE: statefulset
          NAME: dmarc-report
          REPLICAS: 1

  restore_lidarr:
    desc: Restore lidarr database
    cmds:
      - task: _down
        vars:
          NAMESPACE: media
          HELMRELEASE: lidarr
          KUSTOMIZATION: media-lidarr
          TYPE: deployment
          NAME: lidarr
      - echo "DROP DATABASE IF EXISTS lidarr_main;" | psql
      - task: _restore_db
        vars:
          DATABASE: lidarr_main
      - task: _up
        vars:
          NAMESPACE: media
          HELMRELEASE: lidarr
          KUSTOMIZATION: media-lidarr
          TYPE: deployment
          NAME: lidarr
          REPLICAS: 1

  restore_prowlarr:
    desc: Restore prowlarr database
    cmds:
      - task: _down
        vars:
          NAMESPACE: media
          HELMRELEASE: prowlarr
          KUSTOMIZATION: media-prowlarr
          TYPE: deployment
          NAME: prowlarr
      - echo "DROP DATABASE IF EXISTS prowlarr_main;" | psql
      - task: _restore_db
        vars:
          DATABASE: prowlarr_main
      - task: _up
        vars:
          NAMESPACE: media
          HELMRELEASE: prowlarr
          KUSTOMIZATION: media-prowlarr
          TYPE: deployment
          NAME: prowlarr
          REPLICAS: 1

  restore_radarr_4k:
    desc: Restore radarr-4k database
    cmds:
      - task: _down
        vars:
          NAMESPACE: media
          HELMRELEASE: radarr-4k
          KUSTOMIZATION: media-radarr-4k
          TYPE: deployment
          NAME: radarr-4k
      - echo "DROP DATABASE IF EXISTS radarr_4k_main;" | psql
      - task: _restore_db
        vars:
          DATABASE: radarr_4k_main
      - task: _up
        vars:
          NAMESPACE: media
          HELMRELEASE: radarr-4k
          KUSTOMIZATION: media-radarr-4k
          TYPE: deployment
          NAME: radarr-4k
          REPLICAS: 1

  restore_radarr:
    desc: Restore radarr database
    cmds:
      - task: _down
        vars:
          NAMESPACE: media
          HELMRELEASE: radarr
          KUSTOMIZATION: media-radarr
          TYPE: deployment
          NAME: radarr
      - echo "DROP DATABASE IF EXISTS radarr_main;" | psql
      - task: _restore_db
        vars:
          DATABASE: radarr_main
      - task: _up
        vars:
          NAMESPACE: media
          HELMRELEASE: radarr
          KUSTOMIZATION: media-radarr
          TYPE: deployment
          NAME: radarr
          REPLICAS: 1

  restore_shlink:
    desc: Restore shlink database
    cmds:
      - task: _down
        vars:
          NAMESPACE: self-hosted
          HELMRELEASE: shlink-api
          KUSTOMIZATION: self-hosted-shlink
          TYPE: deployment
          NAME: shlink-api
      - echo "DROP DATABASE IF EXISTS shlink;" | psql
      - task: _restore_db
        vars:
          DATABASE: shlink
      - task: _up
        vars:
          NAMESPACE: self-hosted
          HELMRELEASE: shlink-api
          KUSTOMIZATION: self-hosted-shlink
          TYPE: deployment
          NAME: shlink-api
          REPLICAS: 1

  restore_sonarr:
    desc: Restore sonarr database
    cmds:
      - task: _down
        vars:
          NAMESPACE: media
          HELMRELEASE: sonarr
          KUSTOMIZATION: media-sonarr
          TYPE: deployment
          NAME: sonarr
      - echo "DROP DATABASE IF EXISTS sonarr_main;" | psql
      - task: _restore_db
        vars:
          DATABASE: sonarr_main
      - task: _up
        vars:
          NAMESPACE: media
          HELMRELEASE: sonarr
          KUSTOMIZATION: media-sonarr
          TYPE: deployment
          NAME: sonarr
          REPLICAS: 1

  restore_teslamate:
    desc: Restore teslamate database
    cmds:
      - task: _down
        vars:
          NAMESPACE: observability
          HELMRELEASE: teslamate
          KUSTOMIZATION: observability-teslamate
          TYPE: deployment
          NAME: teslamate
      - echo "DROP DATABASE IF EXISTS teslamate;" | psql
      - task: _restore_db
        vars:
          DATABASE: teslamate
      - task: _up
        vars:
          NAMESPACE: observability
          HELMRELEASE: teslamate
          KUSTOMIZATION: observability-teslamate
          TYPE: deployment
          NAME: teslamate
          REPLICAS: 1

  restore_wikijs:
    desc: Restore wikijs database
    cmds:
      - task: _down
        vars:
          NAMESPACE: self-hosted
          HELMRELEASE: wikijs
          KUSTOMIZATION: self-hosted-wikijs
          TYPE: deployment
          NAME: wikijs
      - echo "DROP DATABASE IF EXISTS wikijs;" | psql
      - task: _restore_db
        vars:
          DATABASE: wikijs
      - task: _up
        vars:
          NAMESPACE: self-hosted
          HELMRELEASE: wikijs
          KUSTOMIZATION: self-hosted-wikijs
          TYPE: deployment
          NAME: wikijs
          REPLICAS: 1

  _down:
    desc: Bring a service down
    cmds:
      - flux suspend helmrelease -n {{.NAMESPACE}} {{.HELMRELEASE}}
      - flux suspend kustomization {{.KUSTOMIZATION}}
      - kubectl scale --replicas=0 -n {{.NAMESPACE}} {{.TYPE}}/{{.NAME}}

  _up:
    desc: Bring a service up
    cmds:
      - kubectl scale --replicas={{.REPLICAS}} -n {{.NAMESPACE}} {{.TYPE}}/{{.NAME}}
      - flux resume helmrelease -n {{.NAMESPACE}} {{.HELMRELEASE}}
      - flux resume kustomization {{.KUSTOMIZATION}}

  _restore_db:
    desc: Restore a database
    cmds:
      - cp {{.DBBACKUP}}/last/{{.DATABASE}}-latest.sql.gz /tmp
      - gzip -d /tmp/{{.DATABASE}}-latest.sql.gz
      - psql < /tmp/{{.DATABASE}}-latest.sql
      - rm /tmp/{{.DATABASE}}-latest.sql
