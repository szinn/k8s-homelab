---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  main:
    desc: Bootstrap main cluster
    vars:
      cluster: main
    cmds:
      - task: :talos:bootstrap
        vars:
          cluster: main
      - cmd: talosctl config context staging
        ignore_error: true
      - cmd: kubectl config use-context staging
        ignore_error: true
      - task: merge
        vars:
          cluster: main

  staging:
    desc: Bootstrap staging cluster
    cmds:
      - task: :proxmox:reset-staging
      - task: :talos:bootstrap
        vars:
          cluster: staging
      - task: :proxmox:unmount-staging-cdrom
      - cmd: talosctl config context main
        ignore_error: true
      - cmd: kubectl config use-context main
        ignore_error: true
      - task: merge
        vars:
          cluster: staging
      - task: deploy-base
        vars:
          cluster: staging
      - task: deploy-cluster
        vars:
          cluster: staging

  merge:
    desc: Merge kubeconfig and talosconfig configurations
    requires:
      vars:
        - cluster
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
    cmds:
      - cp $HOME/.kube/config /tmp/kubectl-config-backup
      - cp $HOME/.talos/config /tmp/talosconfig-config-backup
      - cmd: kubectl --kubeconfig $HOME/.kube/config config delete-context {{.cluster}}
        ignore_error: true
      - cmd: talosctl --talosconfig $HOME/.talos/config config remove -y {{.cluster}}
        ignore_error: true
      - KUBECONFIG="$HOME/.kube/config:{{.CLUSTER_DIR}}/kubeconfig" kubectl config view --flatten > $HOME/.kube/config-new
      - mv $HOME/.kube/config-new $HOME/.kube/config
      - talosctl  --talosconfig $HOME/.talos/config config merge {{.CLUSTER_DIR}}/talosconfig
      - chmod og-rwx $HOME/.kube/config
      - chmod og-rwx $HOME/.talos/config

  config:
    desc: Rebuild all cluster configuration
    cmd: bash .taskfiles/Bootstrap/_scripts/build-config.sh

  dump:
    desc: Dump resources
    preconditions:
      - which helmfile kubectl
      - test -f "${TALOSCONFIG}"
      - test -f {{.CLUSTER_DIR}}/bootstrap/helmfile.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/templates/resources.yaml.j2
      - talosctl --context {{.cluster}} config info
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
    cmds:
      - op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli "{{.CLUSTER_DIR}}/bootstrap/templates/resources.yaml.j2"

  # NOTE: Nodes must all be part of the Ceph cluster
  rook:
    desc: Bootstrap Rook-Ceph [cluster={{.cluster}}]
    preconditions:
      - which kubectl talosctl
      - talosctl config info
    requires:
      vars:
        - cluster
    vars:
      BLUESTORE_DISKS_RAW:
        sh: talosctl --context {{.cluster}} get discoveredvolumes -o json | jq -r 'select(.spec.type=="disk" and .spec.name=="bluestore") | {"node":.node, "disk":.spec.dev_dath}' | jq -crs '.'
      BLUESTORE_DISKS:
        ref: "fromJson .BLUESTORE_DISKS_RAW"
    cmds:
      - for:
          var: BLUESTORE_DISKS
        vars:
          NODE:
            sh: kubectl --context {{.cluster}} get nodes -o json | jq -r '.items[] | select(.status.addresses[].address=="{{.ITEM.node}}") | .metadata.name'
          DISK: "{{ .ITEM.disk }}"
        task: :rook:wipe-disk

  deploy-base:
    desc: Bootstrap Base [cluster={{.cluster}}]
    preconditions:
      - which helmfile kubectl
      - test -f "${TALOSCONFIG}"
      - test -f {{.CLUSTER_DIR}}/bootstrap/helmfile-base.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/templates/resources.yaml.j2
      - talosctl --context {{.cluster}} config info
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
    cmds:
      - until kubectl --context {{.cluster}} wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli "{{.CLUSTER_DIR}}/bootstrap/templates/resources.yaml.j2" | kubectl --context {{.cluster}} apply --server-side --filename -
      - helmfile --kube-context {{.cluster}} --quiet --file {{.CLUSTER_DIR}}/bootstrap/helmfile-base.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done

  deploy-cluster:
    desc: Bootstrap Apps [cluster={{.cluster}}]
    preconditions:
      - which helmfile kubectl
      - test -f "${TALOSCONFIG}"
      - test -f {{.CLUSTER_DIR}}/bootstrap/helmfile-cluster.yaml
      - talosctl --context {{.cluster}} config info
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
    cmds:
      - until kubectl --context {{.cluster}} wait nodes --for=condition=Ready=True --all --timeout=10m; do sleep 5; done
      - helmfile --kube-context {{.cluster}} --quiet --file {{.CLUSTER_DIR}}/bootstrap/helmfile-cluster.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done

  # deploy:
  #   desc: Deploy a cluster
  #   cmd: bash .taskfiles/Bootstrap/_scripts/deploy-cluster.sh {{.cluster}}
  #   requires:
  #     vars:
  #       - cluster

  get-certs:
    desc: Fetch certificates from cluster
    cmds:
      - for: { var: certs, split: " " }
        cmd: kubectl --context {{.cluster}} get secrets -n networking {{.ITEM}}-tls -o yaml | grep -v "creationTimestamp:" | grep -v "resourceVersion:" | grep -v " uid:" > kubernetes/{{.cluster}}/apps/{{.ITEM}}-tls.yaml
    requires:
      vars:
        - cluster
    vars:
      certs:
        sh: 'echo {{if eq .cluster "main"}} "tech-wildcard wildcard" {{else}} "wildcard" {{end}}'

  put-certs:
    desc: Upload certificates to cluster
    cmds:
      - for: { var: certs, split: " " }
        cmd: kubectl --context {{.cluster}} apply -f kubernetes/{{.cluster}}/apps/{{.ITEM}}-tls.yaml
    requires:
      vars:
        - cluster
    vars:
      certs:
        sh: 'echo {{if eq .cluster "main"}} "tech-wildcard wildcard" {{else}} "wildcard" {{end}}'
