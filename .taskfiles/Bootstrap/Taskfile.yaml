---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  main:
    desc: Bootstrap main cluster
    vars:
      cluster: main
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    env:
      KUBERNETES_DIR: "{{.KUBERNETES_DIR}}"
      ROOK_DISK_MODEL: "Samsung SSD 980 PRO 1TB"
    cmds:
      - task: :talos:bootstrap
        vars:
          cluster: main
      - task: save-config
        vars:
          cluster: main
      - task: merge-configs
      - task: deploy
        vars:
          cluster: main

  staging:
    desc: Bootstrap staging cluster
    cmds:
      - task: :proxmox:reset-staging
      - task: :talos:bootstrap
        vars:
          cluster: staging
      - task: :proxmox:unmount-staging-cdrom
      - task: save-config
        vars:
          cluster: staging
      - task: merge-configs
      - task: deploy
        vars:
          cluster: staging
      - task: :talos:delete-extra-manifests
        vars:
          cluster: staging

  deploy:
    desc: Bootstrap [cluster={{.cluster}}]
    requires:
      vars:
        - cluster
    preconditions:
      - op user get --me
      - talosctl --context {{.cluster}} config info
      - test -f "${KUBECONFIG}"
      - test -f "${TALOSCONFIG}"
      - test -f {{.KUBERNETES_DIR}}/bootstrap/apps/resources/prepare.sh
      - test -f {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml
    env:
      KUBERNETES_DIR: "{{.KUBERNETES_DIR}}"
      KUBECONFIG: "{{.KUBERNETES_DIR}}/kubeconfig"
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
      ROOK_DISK_MODEL: "{{.ROOK_DISK_MODEL}}"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - bash {{.KUBERNETES_DIR}}/bootstrap/apps/resources/prepare.sh
      - helmfile --quiet --file {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff

  save-config:
    desc: Save kubeconfig and talosconfig to 1Password
    requires:
      vars:
        - cluster
    preconditions:
      - op user get --me
      - test -f "{{.KUBERNETES_DIR}}/kubeconfig"
      - test -f "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - op item edit "cluster-{{.cluster}}" --vault Kubernetes "kubeconfig[text]=$(cat {{.KUBERNETES_DIR}}/kubeconfig)" > /dev/null
      - op item edit "cluster-{{.cluster}}" --vault Kubernetes "talosconfig[text]=$(cat {{.KUBERNETES_DIR}}/talosconfig)" > /dev/null

  fetch-config:
    desc: Fetch kubeconfig and talosconfig from 1Password
    requires:
      vars:
        - cluster
    preconditions:
      - op user get --me
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - op read op://Kubernetes/cluster-{{.cluster}}/kubeconfig > {{.KUBERNETES_DIR}}/kubeconfig
      - op read op://Kubernetes/cluster-{{.cluster}}/talosconfig > {{.KUBERNETES_DIR}}/talosconfig

  merge-configs:
    desc: Merge all configurations into ~/.kube and ~/.talos
    preconditions:
      - test -f "{{.KUBERNETES_ROOT}}/main/kubeconfig"
      - test -f "{{.KUBERNETES_ROOT}}/main/talosconfig"
      - test -f "{{.KUBERNETES_ROOT}}/staging/kubeconfig"
      - test -f "{{.KUBERNETES_ROOT}}/staging/talosconfig"
    cmds:
      - KUBECONFIG="{{.KUBERNETES_ROOT}}/main/kubeconfig:{{.KUBERNETES_ROOT}}/staging/kubeconfig" kubectl config view --flatten > $HOME/.kube/config
      - cp {{.KUBERNETES_ROOT}}/main/talosconfig $HOME/.talos/config
      - talosctl --talosconfig $HOME/.talos/config config merge {{.KUBERNETES_ROOT}}/staging/talosconfig
      - chmod og-rwx $HOME/.kube/config
      - chmod og-rwx $HOME/.talos/config
      - kubectl --kubeconfig=$HOME/.kube/config config use-context main
      - talosctl --talosconfig $HOME/.talos/config config context main
