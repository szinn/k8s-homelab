---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  main:
    desc: Bootstrap main cluster
    vars:
      cluster: main
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    env:
      KUBERNETES_DIR: "{{.KUBERNETES_DIR}}"
    cmds:
      - task: :talos:bootstrap
        vars:
          cluster: main
      - cmd: talosctl config context staging
        ignore_error: true
      - cmd: kubectl config use-context staging
        ignore_error: true
      - task: merge
        vars:
          cluster: main
      - task: deploy
        vars:
          cluster: main
      - helmfile --kube-context {{.cluster}} --quiet --file {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml destroy --selector name=wipe-rook

  staging:
    desc: Bootstrap staging cluster
    cmds:
      - task: :proxmox:reset-staging
      - task: :talos:bootstrap
        vars:
          cluster: staging
      - task: :proxmox:unmount-staging-cdrom
      - cmd: talosctl config context main
        ignore_error: true
      - cmd: kubectl config use-context main
        ignore_error: true
      - task: merge
        vars:
          cluster: staging
      - task: deploy
        vars:
          cluster: staging

  merge:
    desc: Merge kubeconfig and talosconfig configurations
    requires:
      vars:
        - cluster
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - cp $HOME/.kube/config /tmp/kubectl-config-backup
      - cp $HOME/.talos/config /tmp/talosconfig-config-backup
      - cmd: kubectl --kubeconfig $HOME/.kube/config config delete-context {{.cluster}}
        ignore_error: true
      - cmd: talosctl --talosconfig $HOME/.talos/config config remove -y {{.cluster}}
        ignore_error: true
      - KUBECONFIG="$HOME/.kube/config:{{.KUBERNETES_DIR}}/kubeconfig" kubectl config view --flatten > $HOME/.kube/config-new
      - mv $HOME/.kube/config-new $HOME/.kube/config
      - talosctl  --talosconfig $HOME/.talos/config config merge {{.KUBERNETES_DIR}}/talosconfig
      - chmod og-rwx $HOME/.kube/config
      - chmod og-rwx $HOME/.talos/config

  deploy:
    desc: Bootstrap [cluster={{.cluster}}]
    preconditions:
      - op user get --me
      - talosctl --context {{.cluster}} config info
      - which curl gum jq helmfile kubectl kustomize op talosctl yq
      - test -f "${TALOSCONFIG}"
      - test -f {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml
      - test -f {{.KUBERNETES_DIR}}/bootstrap/apps/resources/prepare.sh
    requires:
      vars:
        - cluster
    env:
      CLUSTER_CONTEXT: "{{.cluster}}"
      KUBERNETES_DIR: "{{.KUBERNETES_DIR}}"
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - bash {{.KUBERNETES_DIR}}/bootstrap/apps/resources/prepare.sh
      - helmfile --kube-context {{.cluster}} --quiet --file {{.KUBERNETES_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff

  get-certs:
    desc: Fetch certificates from cluster
    cmds:
      - for: { var: certs, split: " " }
        cmd: kubectl --context {{.cluster}} get secrets -n networking {{.ITEM}}-tls -o yaml | grep -v "creationTimestamp:" | grep -v "resourceVersion:" | grep -v " uid:" > kubernetes/{{.cluster}}/apps/{{.ITEM}}-tls.yaml
    requires:
      vars:
        - cluster
    vars:
      certs:
        sh: 'echo {{if eq .cluster "main"}} "tech-wildcard wildcard" {{else}} "wildcard" {{end}}'

  put-certs:
    desc: Upload certificates to cluster
    cmds:
      - for: { var: certs, split: " " }
        cmd: kubectl --context {{.cluster}} apply -f kubernetes/{{.cluster}}/apps/{{.ITEM}}-tls.yaml
    requires:
      vars:
        - cluster
    vars:
      certs:
        sh: 'echo {{if eq .cluster "main"}} "tech-wildcard wildcard" {{else}} "wildcard" {{end}}'
