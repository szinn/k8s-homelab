---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_SCRIPTS_DIR: "{{.ROOT_DIR}}/.taskfiles/Talos/scripts"

tasks:
  gen-secrets:
    desc: Generate cluster secrets
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which test talhelper sops
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
    requires:
      vars:
        - cluster
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
    cmds:
      - talhelper gensecret > {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - sops -e -i {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml

  bootstrap:
    desc: Bootstrap the cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    requires:
      vars:
        - cluster
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    cmds:
      - task: generate-config
        vars:
          cluster: "{{.cluster}}"
      - task: apply-config
        vars:
          cluster: "{{.cluster}}"
      - task: bootstrap-etcd
        vars:
          cluster: "{{.cluster}}"
      - task: fetch-kubeconfig
        vars:
          cluster: "{{.cluster}}"
      - until kubectl --context {{.cluster}} --kubeconfig="{{.KUBERNETES_DIR}}/{{.cluster}}/kubeconfig" wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done

  #     - task: bootstrap-core
  #       vars:
  #         cluster: "{{.cluster}}"

  generate-config:
    desc: Generate Talos configurations
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which test talhelper cp
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/talconfig.yaml
    requires:
      vars:
        - cluster
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
      TALOS_CONFIG_ROOT: "{{.CLUSTER_DIR}}/bootstrap/talos"
    cmds:
      - |
        talhelper genconfig \
          --secret-file {{.TALOS_CONFIG_ROOT}}/talsecret.sops.yaml \
          --config-file {{.TALOS_CONFIG_ROOT}}/talconfig.yaml \
          --out-dir {{.TALOS_CONFIG_ROOT}}/clusterconfig
      - cp {{.TALOS_CONFIG_ROOT}}/clusterconfig/talosconfig {{.CLUSTER_DIR}}

  apply-config:
    desc: Apply Talos configurations
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which ls
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
    requires:
      vars:
        - cluster
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
      TALOS_CONFIG_ROOT: "{{.CLUSTER_DIR}}/bootstrap/talos"
      CLUSTER_CONFIG_ROOT: "{{.TALOS_CONFIG_ROOT}}/clusterconfig"
      CONFIG_FILES:
        sh: ls {{.CLUSTER_CONFIG_ROOT}}/*.yaml
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    cmds:
      - for: { var: CONFIG_FILES }
        task: _apply-machineconfig
        vars:
          cluster: "{{.cluster}}"
          FILENAME: "{{.ITEM}}"
          HOSTNAME: |-
            {{ trimPrefix (printf "%s-" .cluster) (base .ITEM) | trimSuffix ".yaml" }}

  _apply-machineconfig:
    internal: true
    desc: Apply a single Talos machineConfig to a Talos node
    preconditions:
      - which talosctl
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - cluster
        - HOSTNAME
        - FILENAME
    cmds:
      - talosctl apply-config
        --context "{{.cluster}}"
        --nodes "{{.HOSTNAME}}"
        --file "{{.FILENAME}}"
        --insecure

  bootstrap-etcd:
    desc: Bootstrap Etcd
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - test -f {{.TALOSCONFIG}}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig "{{.CLUSTER_DIR}}/talosconfig" --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    cmds:
      - until talosctl --context {{.cluster}} --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 10; done

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.CLUSTER_DIR}}/talosconfig"
    vars:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}"
      KUBECONFIG: "{{.CLUSTER_DIR}}/kubeconfig"
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig "{{.CLUSTER_DIR}}/talosconfig" --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    cmds:
      - talosctl kubeconfig
        --context {{.cluster}}
        --nodes {{.TALOS_CONTROLLER}}
        --force
        --force-context-name {{.cluster}}
        "{{.KUBECONFIG}}"
      - cmd: kubectl config delete-context "admin@{{.cluster}}"
        ignore_error: true

  # bootstrap-core:
  #   desc: Bootstrap core apps needed for Talos
  #   summary: |
  #     Args:
  #       cluster: Cluster to run command against (required)
  #   cmds:
  #     - echo {{.KUBECONFIG}}
  #     - kubectl config view
  #     - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
  #     - helmfile --quiet --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
  #     - until kubectl --context {{.cluster}} wait --for=condition=Ready=True nodes --all --timeout=10m; do sleep 10; done
  #   requires:
  #     vars:
  #       - cluster
  #   preconditions:
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
  #     - talosctl --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig --context {{.cluster}} config info >/dev/null 2>&1
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  # rolling-upgrade:
  #   desc: Upgrade all Talos nodes
  #   summary: |
  #     Args:
  #       cluster: Cluster to run command against (required)
  #   cmds:
  #     - flux --context {{.cluster}} suspend kustomization --all
  #     # - task: :postgres:maintenance-{{.cluster}}
  #     #   vars:
  #     #     command: set
  #     - for: {var: nodes}
  #       task: upgrade
  #       vars:
  #         cluster: "{{.cluster}}"
  #         node: "{{.ITEM}}"
  #         rollout: "true"
  #     # - task: :postgres:maintenance-{{.cluster}}
  #     #   vars:
  #     #     command: unset
  #     - flux --context {{.cluster}} resume kustomization --all
  #     - task: :kubernetes:delete-failed-pods
  #       vars:
  #         cluster: "{{.cluster}}"
  #   vars:
  #     TARGET_TALOS_VERSION:
  #       sh: yq -r ".talosVersion" {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml
  #     nodes:
  #       sh: talosctl --context {{.cluster}} config info --output json | jq '.nodes[]' | xargs -L 1 dig -x | awk '{print $5}' | sed -e 's/.$//'
  #   requires:
  #     vars:
  #       - cluster
  #   preconditions:
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
  #     - talosctl --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig --context {{.cluster}} config info >/dev/null 2>&1
  #     # - talosctl --context {{.cluster}} --nodes {{.nodes}} get machineconfig >/dev/null 2>&1

  # # task talos:upgrade cluster=main node=k8s-1
  # # task talos:upgrade cluster=staging node=stage-1
  # upgrade:
  #   desc: Upgrade Talos version for a node
  #   summary: |
  #     Args:
  #       cluster: Cluster to run command against (required)
  #       node: The node to upgrade
  #   cmd:
  #     bash {{.TALOS_SCRIPTS_DIR}}/upgrade.sh "{{.cluster}}" "{{.node}}" "{{.TALOS_IMAGE}}" "{{.rollout}}"
  #     # - echo "Upgrading node {{.node}}.{{.SECRET_TECH_DOMAIN_NAME}} on cluster {{.cluster}} to image {{.TALOS_IMAGE}}"
  #     # - read -p "Press any key to resume ..."
  #     # - talosctl --context {{.cluster}} upgrade -n {{.node}}.{{.SECRET_TECH_DOMAIN_NAME}} --image {{.TALOS_IMAGE}}
  #   vars:
  #     rollout: '{{.rollout | default "false"}}'
  #     TALOS_VERSION:
  #       sh: |
  #         yq -r ".talosVersion" {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml
  #     TALOS_IMAGE:
  #       sh: |
  #         talhelper genurl installer \
  #           --env-file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talenv.sops.yaml \
  #           --config-file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml \
  #         | grep {{.node}} \
  #         | awk '{split($0,u," "); print u[2]}'
  #   requires:
  #     vars:
  #       - cluster
  #       - node
  #   preconditions:
  #     - which talhelper
  #     - talosctl config get-contexts | grep {{.cluster}}
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talenv.sops.yaml
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml
  #     - msg: "Talos image could not be determined for {{.node}}"
  #       sh: 'test -n "{{.TALOS_IMAGE}}"'

  # # task talos:upgrade-k8s cluster=main
  # # task talos:upgrade-k8s cluster=staging
  # upgrade-k8s:
  #   desc: Upgrade Kubernetes version for a Talos cluster
  #   summary: |
  #     Args:
  #       cluster: Cluster to run command against (required)
  #   cmds:
  #     - echo "Upgrading k8s on cluster {{.cluster}} to {{.KUBERNETES_VERSION}} via node {{.CONTROLPLANE_NODE}}"
  #     - read -p "Press any key to resume ..."
  #     - talosctl --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig --context {{.cluster}} upgrade-k8s -n {{.CONTROLPLANE_NODE}} --to {{.KUBERNETES_VERSION}}
  #   vars:
  #     KUBERNETES_VERSION:
  #       sh: |
  #         yq -r ".kubernetesVersion" {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talconfig.yaml
  #     CONTROLPLANE_NODE:
  #       sh: |
  #         talosctl --context {{.cluster}} config info \
  #         | grep Endpoints: \
  #         | awk '{split($0,u," "); print u[2]}' \
  #         | sed -E 's/,//'
  #   requires:
  #     vars:
  #       - cluster
  #   preconditions:
  #     - which talhelper
  #     - talosctl config get-contexts | grep {{.cluster}}
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talenv.sops.yaml
  #     - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talconfig.yaml
  #     - msg: "Kubernetes version could not be determined for cluster {{.cluster}}"
  #       sh: 'test -n "{{.KUBERNETES_VERSION}}"'
  #     - msg: "Control plane node could not be determined for cluster {{.cluster}}"
  #       sh: 'test -n "{{.CONTROLPLANE_NODE}}"'
