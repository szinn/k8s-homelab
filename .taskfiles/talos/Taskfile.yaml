---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  bootstrap:
    desc: Bootstrap the cluster
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    cmds:
      - task: generate-config
        vars:
          cluster: '{{.cluster}}'
      - task: apply-config
        vars:
          cluster: '{{.cluster}}'
          nodes: '{{.nodes}}'
      - task: bootstrap-etcd
        vars:
          cluster: '{{.cluster}}'
      - task: fetch-kubeconfig
        vars:
          cluster: '{{.cluster}}'
      - task: bootstrap-core
        vars:
          cluster: '{{.cluster}}'
    requires:
      vars:
        - cluster
        - nodes

  generate-config:
    desc: Generate Talos configurations
    cmds:
      - |
        talhelper genconfig \
          --env-file {{.CONFIG_ROOT}}/talenv.sops.yaml \
          --secret-file {{.CONFIG_ROOT}}/talsecret.sops.yaml \
          --config-file {{.CONFIG_ROOT}}/talconfig.yaml \
          --out-dir {{.CONFIG_ROOT}}/clusterconfig
      - cp {{.CONFIG_ROOT}}/clusterconfig/talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}
    vars:
      CONFIG_ROOT: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos"
    requires:
      vars:
        - cluster

  apply-config:
    desc: Apply Talos configurations
    cmds:
      - for: { var: nodes }
        cmd: |
          talosctl apply-config -i -n {{.ITEM}} \
            --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig \
            --context {{.cluster}} \
            -f {{.CONFIG_ROOT}}/{{.cluster}}-{{.ITEM}}.{{.SECRET_TECH_DOMAIN_NAME}}.yaml
    vars:
      CONFIG_ROOT: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/clusterconfig"
    requires:
      vars:
        - cluster
        - nodes
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig --context {{.cluster}} --nodes {{.controller}} bootstrap; do sleep 10; done
    vars:
      controller:
        sh: talosctl --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars:
        - cluster
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  bootstrap-core:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - echo {{.KUBECONFIG}}
      - kubectl config view
      - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    requires:
      vars:
        - cluster
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmds:
      - |
        talosctl kubeconfig \
          --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig \
          --context {{.cluster}} \
          --nodes {{.controller}} \
          --force \
          --force-context-name {{.cluster}} \
          {{.KUBERNETES_DIR}}/{{.cluster}}
      # Need to do it twice since the context name force doesn't happen the first time
      - |
        talosctl kubeconfig \
          --talosconfig {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig \
          --context {{.cluster}} \
          --nodes {{.controller}} \
          --force \
          --force-context-name {{.cluster}} \
          {{.KUBERNETES_DIR}}/{{.cluster}}
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars:
        - cluster
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  # task talos:upgrade cluster=main node=k8s-1
  # task talos:upgrade cluster=staging node=stage-1
  upgrade:
    desc: Upgrade Talos version for a node
    vars:
      TALOS_VERSION:
        sh: |
          yq -r ".talosVersion" {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml
      TALOS_IMAGE:
        sh: |
          talhelper genurl installer \
            --env-file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talenv.sops.yaml \
            --config-file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml \
          | grep {{.node}} \
          | awk '{split($0,u," "); print u[2]}'
    cmds:
      - echo "Upgrading node {{.node}}.{{.SECRET_TECH_DOMAIN_NAME}} on cluster {{.cluster}} to image {{.TALOS_IMAGE}}"
      - read -p "Press any key to resume ..."
      - talosctl --context {{.cluster}} upgrade -n {{.node}}.{{.SECRET_TECH_DOMAIN_NAME}} --image {{.TALOS_IMAGE }}

    requires:
      vars:
        - cluster
        - node
    preconditions:
      - which talhelper
      - talosctl config get-contexts | grep {{.cluster}}
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talenv.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/talconfig.yaml
      - msg: "Talos image could not be determined for {{.node}}"
        sh: 'test -n "{{.TALOS_IMAGE}}"'

  # task talos:upgrade-k8s cluster=main
  # task talos:upgrade-k8s cluster=staging
  upgrade-k8s:
    desc: Upgrade Kubernetes version for a Talos cluster
    vars:
      KUBERNETES_VERSION:
        sh: |
          yq -r ".kubernetesVersion" {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talconfig.yaml
      CONTROLPLANE_NODE:
        sh: |
          talosctl --context {{.cluster}} config info \
          | grep Endpoints: \
          | awk '{split($0,u," "); print u[2]}' \
          | sed -E 's/,//'
    cmds:
      - echo "Upgrading k8s on cluster {{.cluster}} to {{.KUBERNETES_VERSION}} via node {{.CONTROLPLANE_NODE}}"
      - read -p "Press any key to resume ..."
      - talosctl --context {{.cluster}} upgrade-k8s -n {{.CONTROLPLANE_NODE}} --to {{.KUBERNETES_VERSION}}
    requires:
      vars:
        - cluster
    preconditions:
      - which talhelper
      - talosctl config get-contexts | grep {{.cluster}}
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talenv.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos//talconfig.yaml
      - msg: "Kubernetes version could not be determined for cluster {{.cluster}}"
        sh: 'test -n "{{.KUBERNETES_VERSION}}"'
      - msg: "Control plane node could not be determined for cluster {{.cluster}}"
        sh: 'test -n "{{.CONTROLPLANE_NODE}}"'
