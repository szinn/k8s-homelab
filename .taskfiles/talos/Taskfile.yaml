---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_SCRIPTS_DIR: "{{.ROOT_DIR}}/.taskfiles/Talos/scripts"

tasks:
  gen-secrets:
    desc: Generate cluster secrets
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which test talhelper sops
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml
    requires:
      vars:
        - cluster
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
    cmds:
      - talhelper gensecret > {{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - sops -e -i {{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml

  bootstrap:
    desc: Bootstrap the cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    requires:
      vars:
        - cluster
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    cmds:
      - task: generate-config
        vars:
          cluster: "{{.cluster}}"
      - task: apply-config
        vars:
          cluster: "{{.cluster}}"
      - task: bootstrap-etcd
        vars:
          cluster: "{{.cluster}}"
      - task: fetch-kubeconfig
        vars:
          cluster: "{{.cluster}}"
      - until kubectl --context {{.cluster}} --kubeconfig="{{.KUBERNETES_ROOT}}/{{.cluster}}/kubeconfig" wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done

  #     - task: bootstrap-core
  #       vars:
  #         cluster: "{{.cluster}}"

  generate-config:
    desc: Generate Talos configurations
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which test talhelper cp
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml
    requires:
      vars:
        - cluster
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      TALOS_CONFIG_ROOT: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - |
        talhelper genconfig \
          --secret-file {{.TALOS_CONFIG_ROOT}}/talsecret.sops.yaml \
          --config-file {{.TALOS_CONFIG_ROOT}}/talconfig.yaml \
          --out-dir {{.TALOS_CONFIG_ROOT}}/clusterconfig
      - cp {{.TALOS_CONFIG_ROOT}}/clusterconfig/talosconfig {{.KUBERNETES_DIR}}

  apply-config:
    desc: Apply Talos configurations
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - which ls
      - test -f {{.KUBERNETES_ROOT}}/{{.cluster}}/talosconfig
    requires:
      vars:
        - cluster
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      TALOS_CONFIG_ROOT: "{{.KUBERNETES_DIR}}/bootstrap/talos"
      CLUSTER_CONFIG_ROOT: "{{.TALOS_CONFIG_ROOT}}/clusterconfig"
      CONFIG_FILES:
        sh: ls {{.CLUSTER_CONFIG_ROOT}}/*.yaml
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    cmds:
      - for: { var: CONFIG_FILES }
        task: _apply-machineconfig
        vars:
          cluster: "{{.cluster}}"
          FILENAME: "{{.ITEM}}"
          HOSTNAME: |-
            {{ trimPrefix (printf "%s-" .cluster) (base .ITEM) | trimSuffix ".yaml" }}

  _apply-machineconfig:
    desc: Apply a single Talos machineConfig to a Talos node
    internal: true
    preconditions:
      - which talosctl
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - cluster
        - HOSTNAME
        - FILENAME
    cmds:
      - talosctl apply-config
        --context "{{.cluster}}"
        --nodes "{{.HOSTNAME}}"
        --file "{{.FILENAME}}"
        --insecure

  bootstrap-etcd:
    desc: Bootstrap Etcd
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - test -f {{.TALOSCONFIG}}
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig "{{.KUBERNETES_DIR}}/talosconfig" --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    cmds:
      - until talosctl --context {{.cluster}} --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 10; done

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      KUBECONFIG: "{{.KUBERNETES_DIR}}/kubeconfig"
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig "{{.KUBERNETES_DIR}}/talosconfig" --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    cmds:
      - talosctl kubeconfig
        --context {{.cluster}}
        --nodes {{.TALOS_CONTROLLER}}
        --force
        --force-context-name {{.cluster}}
        "{{.KUBECONFIG}}"
      - cmd: kubectl config delete-context "admin@{{.cluster}}"
        ignore_error: true

  delete-extra-manifests:
    desc: Delete extra manifests from the control-plane nodes
    requires:
      vars:
        - cluster
    env:
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      TALOS_CONTROLLERS:
        sh: talosctl --talosconfig "{{.KUBERNETES_DIR}}/talosconfig" config info --output json | jq --exit-status --raw-output '.endpoints[]'
    cmds:
      - for: { var: TALOS_CONTROLLERS }
        task: _delete-extra-manifests
        vars:
          cluster: "{{.cluster}}"
          node: "{{.ITEM}}"

  _delete-extra-manifests:
    internal: true
    requires:
      vars:
        - cluster
        - node
    env:
      TALOSCONFIG: "{{.KUBERNETES_DIR}}/talosconfig"
    vars:
      KUBERNETES_DIR: "{{.KUBERNETES_ROOT}}/{{.cluster}}"
      PATCH: '[{"op": "remove", "path": "/cluster/extraManifests"}]'
    cmds:
      - cmd: talosctl --talosconfig "{{.KUBERNETES_DIR}}/talosconfig" --nodes {{.node}} --mode=no-reboot patch machineconfig -p '{{.PATCH}}'
        ignore_error: true
