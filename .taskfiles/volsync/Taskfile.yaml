---
version: "3"

# This taskfile is used to manage certain VolSync tasks for a given application, limitations are described below.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Applications are deployed as either a Kubernetes Deployment or StatefulSet
#   4. Each application only has one PVC that is being replicated

vars:
  VOLSYNC_TASK_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/volsync/resources"

tasks:
  unlock:
    desc: Unlock all restic source repos
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        ns: Namespace the PVC is in (default: default)
        app: Application to list snapshots for (required)
    preconditions:
      - which kubectl
    vars:
      CLUSTER: '{{ or .cluster (fail "Argument (cluster) is required") }}'
      SOURCES:
        sh: kubectl --context {{.CLUSTER}} get replicationsources --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    cmds:
      - for:
          var: SOURCES
          split: "\n"
        cmd: kubectl --context {{.CLUSTER}} --namespace {{splitList "," .ITEM | first}} patch --field-manager=flux-client-side-apply replicationsources {{splitList "," .ITEM | last}} --type merge --patch "{\"spec\":{\"restic\":{\"unlock\":\"{{now | unixEpoch}}\"}}}"

  list:
    desc: List all snapshots
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        ns: Namespace the PVC is in (default: default)
        app: Application to list snapshots for (required)
    cmds:
      - minijinja-cli {{.VOLSYNC_TASK_RESOURCES_DIR}}/list-snapshots.yaml.j2 | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - until kubectl --context {{.CLUSTER}} --namespace {{.NS}} get job/{{ .JOB }} &>/dev/null; do sleep 5; done
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} wait job/{{ .JOB }} --for=condition=complete --timeout=5m
      - stern --context {{.CLUSTER}} --namespace {{.NS}} job/{{ .JOB }} --no-follow
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} delete job {{ .JOB }}
    vars:
      CLUSTER: '{{ or .cluster (fail "Argument (cluster) is required") }}'
      APP: '{{ or .app (fail "Argument (app) is required") }}'
      NS: '{{.ns | default "default"}}'
      JOB: "list-snapshots-{{ .APP }}"
    env:
      NS: "{{.NS}}"
      APP: "{{.APP}}"
      CLUSTER: "{{.cluster}}"
    preconditions:
      - which kubectl minijinja-cli
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} get replicationsources {{.APP}}
      - test -f "{{.VOLSYNC_TASK_RESOURCES_DIR}}/list-snapshots.yaml.j2"
    silent: true

  # To run backup jobs in parallel for all replicationsources:
  #  - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:snapshot app=$0 ns=$1'
  snapshot:
    desc: Trigger a Restic ReplicationSource snapshot
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        ns: Namespace the PVC is in (default: default)
        app: Application to list snapshots for (required)
    cmds:
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} patch replicationsources {{.APP}} --type merge -p '{"spec":{"trigger":{"manual":"{{now | unixEpoch}}"}}}'
      - |-
        {{ if eq "true" .WAIT }}until kubectl --context {{.CLUSTER}} --namespace {{.NS}} get job/{{.JOB}} &>/dev/null; do sleep 5; done{{ end }}
      - |-
        {{ if eq "true" .WAIT }}kubectl --context {{.CLUSTER}} --namespace {{.NS}} wait job/{{.JOB}} --for=condition=complete --timeout=120m{{ end }}
    vars:
      CLUSTER: '{{ or .cluster (fail "Argument (cluster) is required") }}'
      APP: '{{ or .app (fail "Argument (app) is required") }}'
      NS: '{{.ns | default "default"}}'
      WAIT: '{{.wait | default "true"}}'
      JOB: volsync-src-{{.APP}}
    preconditions:
      - which kubectl
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} get replicationsources {{.APP}}

  snapshot-all:
    desc: Snapshot all apps across all namespaces
    preconditions:
      - which kubectl
    vars:
      CLUSTER: '{{ or .cluster (fail "Argument (cluster) is required") }}'
      ALL_APPS:
        sh: |
          kubectl --context {{.CLUSTER}} get replicationsources -A --no-headers -o jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}' | grep -v '\-r2'
    cmds:
      - for:
          var: ALL_APPS
          split: "\n"
        task: snapshot
        vars:
          wait: "false"
          cluster: "{{.CLUSTER}}"
          ns: '{{splitList "," .ITEM | first}}'
          app: '{{splitList "," .ITEM | last}}'

  restore:
    desc: Restore an app [NS=default] [APP=required] [PREVIOUS=required]
    preconditions:
      - which flux kubectl minijinja-cli
      - test -f {{.VOLSYNC_TASK_RESOURCES_DIR}}/replicationdestination.yaml.j2
    requires:
      vars:
        - app
        - previous
    vars:
      CLUSTER: '{{ or .cluster (fail "Argument (cluster) is required") }}'
      NS: '{{.NS | default "default"}}'
      CONTROLLER:
        sh: kubectl --namespace {{.NS}} get deployment {{.APP}} &>/dev/null && echo deployment || echo statefulset
      PREVIOUS: "{{.previous}}"
    env:
      CLUSTER: "{{.CLUSTER}}"
      NS: "{{.NS}}"
      APP: "{{.APP}}"
      PREVIOUS: "{{.PREVIOUS}}"
      CLAIM:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.sourcePVC}"
      ACCESS_MODES:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.accessModes}"
      STORAGE_CLASS_NAME:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.storageClassName}"
      PUID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      PGID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"
    cmds:
      # Suspend
      - flux --context {{.CLUSTER}} --namespace {{.NS}} suspend kustomization {{.APP}}
      - flux --context {{.CLUSTER}} --namespace {{.NS}} suspend helmrelease {{.APP}}
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas 0
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} wait pod --for=delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
      # Restore
      - minijinja-cli {{.VOLSYNC_TASK_RESOURCES_DIR}}/replicationdestination.yaml.j2 | kubectl apply --context {{.CLUSTER}} --server-side --filename -
      - until kubectl --context {{.CLUSTER}} --namespace {{.NS}} get job/volsync-dst-{{.APP}}-manual &>/dev/null; do sleep 5; done
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} wait job/volsync-dst-{{.APP}}-manual --for=condition=complete --timeout=120m
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} delete replicationdestination {{.APP}}-manual
      # Resume
      - flux --context {{.CLUSTER}} --namespace {{.NS}} resume kustomization {{.APP}}
      - flux --context {{.CLUSTER}} --namespace {{.NS}} resume helmrelease {{.APP}}
      - flux --context {{.CLUSTER}} --namespace {{.NS}} reconcile helmrelease {{.APP}} --force
      - kubectl --context {{.CLUSTER}} --namespace {{.NS}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
