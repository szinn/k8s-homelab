---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 15m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 2000
        runAsGroup: 2000
        runAsNonRoot: true
        fsGroup: 2000
        fsGroupChangePolicy: OnRootMismatch
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: app.kubernetes.io/name
                          operator: In
                          values:
                            - sabnzbd
                            - radarr-4k
                    topologyKey: kubernetes.io/hostname
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16@sha256:4572dc17c5b1f5a8a50508002e1adf0f0120130d4288e2fd6d7ebf59baed5b90
            envFrom: &envFrom
              - secretRef:
                  name: radarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.6.0.8846@sha256:b3137a2b451683d834627bf6997460f26eb864757b1ffb5eb6544a8ba6d432ef
            env:
              TZ: ${CONFIG_TIMEZONE}
              RADARR__INSTANCE_NAME: Radarr
              RADARR__PORT: &port 7878
              RADARR__AUTHENTICATION_METHOD: External
              RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              RADARR__APPLICATION_URL: "https://radarr.${SECRET_DOMAIN_NAME}"
              RADARR__LOG_LEVEL: info
              RADARR__THEME: dark
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
    service:
      app:
        controller: radarr
        ports:
          http:
            port: 7878
    ingress:
      app:
        enabled: true
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN_NAME}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: radarr-config
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
      media:
        existingClaim: media-datastore
        globalMounts:
          - path: /media
      downloads:
        existingClaim: downloads
        globalMounts:
          - path: /downloads
      backup:
        existingClaim: media-backups
        globalMounts:
          - path: /config/Backups
            subPath: radarr
      tmp:
        type: emptyDir
