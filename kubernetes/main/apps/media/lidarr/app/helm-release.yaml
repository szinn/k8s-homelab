---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.1/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: lidarr
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.0.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 15m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          securityContext:
            runAsUser: 568 # ${APP_UID}
            runAsGroup: 568 # ${APP_GID}
            fsGroup: 568 # ${APP_GID}
            fsGroupChangePolicy: "OnRootMismatch"
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/lidarr
              tag: 2.1.7.4030
            env:
              TZ: ${CONFIG_TIMEZONE}
              LIDARR__LOG_LEVEL: info
              LIDARR__THEME: dark
            envFrom:
              - secretRef:
                  name: lidarr-secret
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /usr/bin/env
                      - bash
                      - -c
                      - curl --fail localhost:8686/api/v1/system/status?apiKey=`IFS=\> && while
                        read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
                  failureThreshold: 5
                  initialDelaySeconds: 60
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 10
    service:
      main:
        controller: main
        ports:
          http:
            port: 8686
    ingress:
      main:
        enabled: true
        className: nginx
        annotations:
          ingress.home.arpa/type: "internal"
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN_NAME}"
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
    persistence:
      config:
        enabled: true
        existingClaim: "${VOLSYNC_CLAIM}"
        advancedMounts:
          main:
            main:
              - path: /config
      media:
        existingClaim: media-datastore
        globalMounts:
          - path: /media
      downloads:
        existingClaim: downloads
        globalMounts:
          - path: /downloads
      backup:
        existingClaim: media-backups
        globalMounts:
          - path: /backups
            subPath: lidarr
