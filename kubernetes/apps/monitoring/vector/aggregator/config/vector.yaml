---
data_dir: /vector-data-dir
api:
  enabled: true
  address: 0.0.0.0:8686
# Sources
enrichment_tables:
  geoip_table:
    type: geoip
    path: /usr/share/GeoIP/GeoLite2-City.mmdb
sources:
  kubernetes_logs:
    address: 0.0.0.0:6000
    type: vector
    version: "2"
  talos_kernel_logs:
    address: 0.0.0.0:6001
    type: socket
    mode: udp
    max_length: 102400
    decoding:
      codec: json
    host_key: __host
  talos_service_logs:
    address: 0.0.0.0:6002
    type: socket
    mode: udp
    max_length: 102400
    decoding:
      codec: json
    host_key: __host
  vyos_logs:
    type: syslog
    address: 0.0.0.0:6003
    mode: tcp
# Transformas
transforms:
  kubernetes_remap:
    type: remap
    inputs:
      - kubernetes_logs
    source: |-
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
  kernel_hostname_transform:
    type: remap
    inputs:
      - talos_kernel_logs
    source: |-
      r1 = replace!(.__host, "10.11.0.16", "k8s-1")
      r2 = replace(r1, "10.11.0.17", "k8s-2")
      r3 = replace(r2, "10.11.0.18", "k8s-3")
      r4 = replace(r3, "10.11.0.19", "k8s-4")
      r5 = replace(r4, "10.11.0.20", "k8s-5")
      r6 = replace(r5, "10.11.0.21", "k8s-6")
      .node = r6
  service_hostname_transform:
    type: remap
    inputs:
      - talos_service_logs
    source: |-
      r1 = replace!(.__host, "10.11.0.16", "k8s-1")
      r2 = replace(r1, "10.11.0.17", "k8s-2")
      r3 = replace(r2, "10.11.0.18", "k8s-3")
      r4 = replace(r3, "10.11.0.19", "k8s-4")
      r5 = replace(r4, "10.11.0.20", "k8s-5")
      r6 = replace(r5, "10.11.0.21", "k8s-6")
      r7 = replace(r6, r'10.*', "talos")
      .node = r7
  # [63950.153039] [wan-local-default-D]IN=eth4 OUT= MAC=xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx SRC=xxx.xxx.xxx.xxx DST=xxx.xxx.xxx.xxx LEN=40 TOS=0x00 PREC=0x00 TTL=240 ID=60610 PROTO=TCP SPT=53451 DPT=2002 WINDOW=1024 RES=0x00 SYN URGP=0
  vyos_firewall_route:
    type: route
    inputs: ["vyos_logs"]
    route:
      firewall: |
        .facility == "kern" && match!(.message, r'^\[(.*?)\].(.*)')
  vyos_firewall_remap:
    type: remap
    inputs: ["vyos_firewall_route.firewall"]
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^\[.*\].\[(?P<rule>.*?)\](?P<fields>.*)')
      if split_err != null {
          abort
      }
      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
          abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
          abort
      }
      # Add more information about the triggered rule
      .message.RULE, parse_err = parse_regex(split_message.rule, r'^(?P<from_zone>\w+)-(?P<to_zone>\w+)-(?P<id>\w+)-(?P<action>\w+)$')
      if parse_err != null {
          abort
      }
  vyos_firewall_wan_route:
    type: route
    inputs: ["vyos_firewall_remap"]
    route:
      from_wan: .message.RULE.from_zone == "wan"
  vyos_firewall_geoip_remap:
    type: remap
    inputs: ["vyos_firewall_wan_route.from_wan"]
    source: |
      .geoip = get_enrichment_table_record!(
          "geoip_table", {
              "ip": .message.SRC
          }
      )
# Sinks
sinks:
  loki_kubernetes:
    type: loki
    inputs:
      - kubernetes_remap
    endpoint: http://loki-gateway:80
    encoding:
      codec: json
    batch:
      max_bytes: 524288
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: '{{ custom_app_name }}'
      container: '{{ kubernetes.container_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'
      cluster: "${CONFIG_CLUSTER_NAME}"
  talos_kernel:
    type: loki
    inputs:
      - kernel_hostname_transform
    endpoint: http://loki-gateway:80
    encoding:
      codec: json
      except_fields:
        - __host
    batch:
      max_bytes: 524288
    out_of_order_action: rewrite_timestamp
    labels:
      node: '{{ node }}'
      facility: '{{ facility }}'
      cluster: "${CONFIG_CLUSTER_NAME}"
      namespace: "talos:kernel"
  talos_service:
    type: loki
    inputs:
      - service_hostname_transform
    endpoint: http://loki-gateway:80
    encoding:
      codec: json
      except_fields:
        - __host
    batch:
      max_bytes: 524288
    out_of_order_action: rewrite_timestamp
    labels:
      node: '{{ node }}'
      talos_service: '{{ "talos-service" }}'
      cluster: "${CONFIG_CLUSTER_NAME}"
      namespace: "talos:service"
  vyos_firewall:
    inputs: ["vyos_firewall_geoip_remap"]
    type: loki
    endpoint: http://loki-gateway:80
    encoding:
      codec: json
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      node: 'gateway-firewall'
  vyos:
    inputs: ["vyos_logs"]
    type: loki
    endpoint: http://loki-gateway:80
    encoding:
      codec: json
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      node: 'gateway'
